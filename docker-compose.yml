
services:
  postgresql:
    image: postgres:16.0-alpine3.18
    container_name: postgresql
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - pg_data:/var/lib/postgresql/data
      # - ./db/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - back_net

  api:
    # build: .
    build:
      context: .
      dockerfile: backend/dockerfile
    image: fast.api:0.1
    container_name: poetry_club_api
    restart: unless-stopped
    networks:
      - back_net
    depends_on:
      - postgresql
    env_file:
      - .env
    # environment:
    #   DATABASE_URL: postgresql://myuser:mypassword@postgresql:5432/mydatabase
    volumes:
      # - ./backend:/backend
      - ./backend/api:/app/api_cash
    # command: poetry run uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
  
  bot:
    # build: .
    build:
      context: .
      dockerfile: bot/dockerfile
    image: telegram.bot:0.1
    container_name: telegram_bot
    restart: unless-stopped
    networks:
      - back_net
    depends_on:
      - postgresql
      - api
    env_file:
      - .env
    volumes:
      - ./bot/app:/app/bot_cash
    # command: poetry run python bot/main.py --reload
    # environment:
    #   DATABASE_URL: postgresql://myuser:mypassword@postgresql:5432/mydatabase
    # ports:
      # - "8040:8040"

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    networks:
      - back_net
    ports:
      - 8080:8080
    depends_on:
      - postgresql

networks:
  back_net:
    name: project_poetry_club.local
    driver: bridge

volumes:
  pg_data:
  backend:
  

