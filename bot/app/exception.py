import asyncio
import logging
from aiohttp import (
    ClientError,
    ClientConnectorError,
    ClientResponseError,
    ServerTimeoutError,
)


async def handle_api_errors(callback_or_msg, e):
    if isinstance(e, ClientConnectorError):
        await callback_or_msg.answer("‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.")
        logging.error(f"‚ùå Error: {e}")
    elif isinstance(e, ServerTimeoutError):
        await callback_or_msg.answer("‚è∞ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.")
        logging.error(f"‚ùå Error: {e}")
    elif isinstance(e, ClientResponseError):
        await callback_or_msg.answer(f"‚ùå –û—Ç–≤–µ—Ç API: {e.status}")
        logging.error(f"‚ùå Error: {e}")
    elif isinstance(e, asyncio.TimeoutError):
        await callback_or_msg.answer("‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
        logging.error(f"‚ùå Error: {e}")
    elif isinstance(e, ClientError):
        await callback_or_msg.answer(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        logging.error(f"‚ùå Error: {e}")
    else:
        logging.error(f"‚ùå Unknown error: {e}")
        await callback_or_msg.answer("üîß –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")