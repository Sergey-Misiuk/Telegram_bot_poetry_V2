from aiogram import F, Router
from aiogram.types import Message, CallbackQuery

import app.keyboards as kb
from app.middlewares import IsAdmin

import asyncio
import aiohttp
from aiohttp import (
    ClientError,
    ClientConnectorError,
    ClientResponseError,
    ServerTimeoutError,
)

from app.config.bot_config import API_BASE_URL, TG_KEY_API
from app.middlewares import IsAdmin
import logging


router = Router()

headers = {"api-key": TG_KEY_API}
timeout = aiohttp.ClientTimeout(total=15, connect=10)
# from app.handlers.handlers import router


async def fetch_statuses_from_api():
    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{API_BASE_URL}/statuses",
        ) as response:
            if response.status == 200:
                return await response.json()
            return []


@router.message(IsAdmin(), F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
# @router.message(F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
async def admin(message: Message):
    keyboard = kb.admin_panel

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=keyboard)


@router.message(IsAdmin(), F.text.endswith("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
# @router.message(F.text.endswith("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
async def to_main_page(message: Message):
    keyboard = kb.admin_main

    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


@router.message(IsAdmin(), F.text.endswith("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç–∏—Ö–∏"))
# @router.message(F.text.endswith("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç–∏—Ö–∏"))
async def request_order_by_status(message: Message):
    statuses = await fetch_statuses_from_api()
    keyboard = await kb.status_keyboard(statuses)
    await message.answer("–í—ã–±–∏—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∫–∞–∑–∞", reply_markup=keyboard)


@router.callback_query(IsAdmin(), lambda c: c.data.startswith("status_"))
async def handle_status_selection(callback: CallbackQuery):
    status = callback.data.split("_")[1]
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å: {status}")
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            response = await session.get(
                f"{API_BASE_URL}/orders_status_{status}",
                headers=headers,
                timeout=timeout,
                params=None,
            )

        if response.status == 200:
            data = await response.json()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

        if data["data"] is not None:
            keyboard = await kb.poems(data, page=0, category="pers")
            await callback.message.answer("–ï—Å—Ç—å —Å—Ç–∏—Ö–∏", reply_markup=keyboard)
        else:
            await callback.message.answer("–¢–∞–∫–∏—Ö —Å—Ç–∏—Ö–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
    except ClientConnectorError:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å."
        )

    except ServerTimeoutError:
        await callback.message.answer(
            "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )

    except ClientResponseError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e.status}")

    except asyncio.TimeoutError:
        await callback.message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")

    except ClientError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")

    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
        logging.error(f"ERROR {e}")


@router.callback_query(IsAdmin(), F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):

    poem_id = int(callback.data.split(":")[1])

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            response = await session.post(
                f"{API_BASE_URL}/moderation/approve",
                headers=headers,
                timeout=timeout,
                params=None,
                json={
                    "poem_id": poem_id,
                },
            )

        if response.status == 200:
            data = await response.json()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

        if data is not None:
            await callback.answer("–°—Ç–∏—Ö –æ–¥–æ–±—Ä–µ–Ω ‚úÖ")
        else:
            await callback.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏—Ö–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
    except ClientConnectorError:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å."
        )


@router.callback_query(IsAdmin(), F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    
    poem_id = int(callback.data.split(":")[1])

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            response = await session.post(
                f"{API_BASE_URL}/moderation/reject",
                headers=headers,
                timeout=timeout,
                params=None,
                json={
                    "poem_id": poem_id,
                },
            )

        if response.status == 200:
            data = await response.json()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

        if data is not None:
            await callback.answer("–°—Ç–∏—Ö –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
        else:
            await callback.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏—Ö–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
    except ClientConnectorError:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å."
        )


@router.callback_query(IsAdmin(), F.data.startswith("to_review:"))
async def handle_to_review(callback: CallbackQuery):

    poem_id = int(callback.data.split(":")[1])

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            response = await session.post(
                f"{API_BASE_URL}/moderation/review",
                headers=headers,
                timeout=timeout,
                params=None,
                json={
                    "poem_id": poem_id,
                },
            )

        if response.status == 200:
            data = await response.json()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

        if data is not None:
            await callback.answer("–°—Ç–∏—Ö –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ üîÑ")
        else:
            await callback.message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∏—Ö–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
    except ClientConnectorError:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å."
        )
