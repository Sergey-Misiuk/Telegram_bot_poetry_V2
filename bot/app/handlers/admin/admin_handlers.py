from aiogram import F, Router
from aiogram.types import Message, CallbackQuery

from app.config.bot_config import API_BASE_URL, HEADERS, TIMEOUT
import app.keyboards as kb
from app.middlewares import IsAdmin
from app.utils.api_helpers import get_to_api, post_to_api
from app.exception import handle_api_errors


router = Router()


@router.message(IsAdmin(), F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
async def admin(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=kb.admin_panel)


@router.message(IsAdmin(), F.text.endswith("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
async def to_main_page(message: Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.admin_main)


@router.message(IsAdmin(), F.text.endswith("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
async def request_count_users(message: Message):
  
    url = f"{API_BASE_URL}/users/count"
    data = await get_to_api(url, headers=HEADERS, timeout=TIMEOUT)
    
    try:
        if data:
            count = data.get("count", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            await message.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {count}")
        else:
            await message.answer("üö´ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
    except Exception as e:
        await handle_api_errors(message, e)


@router.message(IsAdmin(), F.text.endswith("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç–∏—Ö–∏"))
async def request_order_by_status(message: Message):
    
    url = f"{API_BASE_URL}/statuses"
    data = await get_to_api(url, headers=HEADERS, timeout=TIMEOUT)
    
    try:
        if data:
            keyboard = kb.status_keyboard(data)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
    except Exception as e:
        await handle_api_errors(message, e)


@router.callback_query(IsAdmin(), F.data.startswith("status_"))
async def handle_status_selection(callback: CallbackQuery):
    status = callback.data.split("_", 1)[1]
    await callback.answer(f"–°—Ç–∞—Ç—É—Å: {status}")
    
    url = f"{API_BASE_URL}/orders_status_{status}"
    data = await get_to_api(url, headers=HEADERS, timeout=TIMEOUT)
    
    try:
        if data:
            poems = data.get("data")
            if poems:
                keyboard = kb.poems(poems, page=0, category="pers")
                await callback.message.answer("üìú –°—Ç–∏—Ö–∏:", reply_markup=keyboard)
            else:
                await callback.message.answer("üö´ –ù–µ—Ç —Å—Ç–∏—Ö–æ–≤ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        else:
            await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç API.")
    except Exception as e:
        await handle_api_errors(callback.message, e)


async def update_poem_status(callback: CallbackQuery, status: str, success_msg: str):
    poem_id = int(callback.data.split(":")[1])
    endpoint_map = {
        "APPROVED": "approve",
        "REJECTED": "reject",
        "PENDING": "review"
    }
    json = {"poem_id": poem_id}
    url = f"{API_BASE_URL}/moderation/{endpoint_map[status]}"
    data = await post_to_api(url, data=json, headers=HEADERS, timeout=TIMEOUT)
    
    try:
        if data:
            await callback.answer(success_msg)
        else:
            await callback.message.answer("üö´ –û—à–∏–±–∫–∞ –æ—Ç API.")
    except Exception as e:
        await handle_api_errors(callback.message, e)


@router.callback_query(IsAdmin(), F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):
    await update_poem_status(callback, "APPROVED", "‚úÖ –°—Ç–∏—Ö –æ–¥–æ–±—Ä–µ–Ω!")


@router.callback_query(IsAdmin(), F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    await update_poem_status(callback, "REJECTED", "‚ùå –°—Ç–∏—Ö –æ—Ç–∫–ª–æ–Ω—ë–Ω!")


@router.callback_query(IsAdmin(), F.data.startswith("to_review:"))
async def handle_to_review(callback: CallbackQuery):
    await update_poem_status(callback, "PENDING", "üîÑ –°—Ç–∏—Ö –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
